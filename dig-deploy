#!/usr/bin/env bash

VERSION="0.1.0"
PROJECT_NAME=$(basename $(pwd))
PROJECT_PATH=$(pwd)
PROJECTS_PATH=$(pwd)
ENDPOINT="http://127.0.0.1:65432"
VERBOSE=false
BASIC_AUTH=false
DIGDAG_CLI=$(which digdag)
AWS_CLI=$(which aws)

function usage() {
  cat <<EOM
Usage: dig-deploy [options...]

Options:
  -n | --name              Digdag project name
  -p | --project           Digdag project path. (default: current directory)
  -P | --projects          Digdag projects path which multiple digdag projects are placed (default: current directory)
  -r | --revision          Unique name of the digdga project revision. If this is not set, a random UUID is automatically generated
  -s | --schedule-from     Start schedules from this time. If this is not set, system time of the server is used
  -e | --endpoint          HTTP endpoint of the digdag server (default: http://127.0.0.1:65432)
  -c | --cloud-provider    The cloud service provider which remote digdag server is runnning on. (e.g. Amazon Web Service, Google Cloud Platform)
  -k | --aws-access-key    AWS Access Key ID - If you set this --cloud-provider, --aws-security-group-id and --aws-access-key are needed
  -s | --aws-secret-key    AWS Secret Access Key - If you set this --cloud-provider, --aws-security-group-id and --aws-access-key are needed
  -b | --basic-auth        If remote digdag server is using basic authentication, this is necessary with --basic-auth-user and --basic--auth-pass
  --basic-auth-user        Basic Authentication User
  --basic-auth-pass        Basic AUthentication Password
  -v | --verbose           Verbose output

Requirements:
  digdag: https://www.digdag.io
EOM

  exit 3
}

function require() {
    command -v "$1" > /dev/null 2>&1 || {
        echo "Some of the required cli command is not installed:"
        echo "    please install $1" >&2;
        exit 4;
    }
}

function buildBasicAuthURL() {
  ENDPOINT=$(echo $ENDPOINT | sed -E 's|(https?://)|\1$BASIC_AUTH_USER:BASIC_AUTH_PASS@|')
}

function digdagPush() {
  $DIGDAG_CLI push $PROJECT_NAME --project $PROJECT_PATH --endpoint $ENDPOINT $PROJECT_REVISION $SCHEDULE_FROM
}

function pushProject() {
  if [ $BASIC_AUTH = true ]; then
    buildBasicAuthURL
    digdagPush
  elif [ $CLOUD_PROVIDER = "aws" ]; then
    openAWSSecurityGroupBeforePush
    digdagPush
    closeAWSSecurityGroupAfterPush
  else
    digdagPush
  fi
}

echo $#
[ $# == 0 ] && usage

while [[ $# -gt 0 ]]
do
  option="$1"
  echo $option

  case $option in
    -n|--name)
      PROJECT_NAME="$2"
      shift
      ;;
    -p|--project)
      PROJECT_PATH="$2"
      shift
      ;;
    -P|--projects)
      PROJECTS_PATH="$2"
      shift
      ;;
    -r|--revision)
      PROJECT_REVISION="-r $2"
      shift
      ;;
    -s|--schedule-from)
      SCHEDULE_FROM="--schedule-from $2"
      shift
      ;;
    -e|--endpoint)
      ENDPOINT="$2"
      shift
      ;;
    -v|--verbose)
      VERBOSE=true
      ;;
    -c|--cloud-provider)
      CLOUD_PROVIDER="$2"
      shift
      ;;
    -k|--aws-access-key)
      AWS_ACCESS_KEY_ID="$2"
      shift
      ;;
    -s|--aws-secret-key)
      AWS_SECRET_ACCESS_KEY="$2"
      shift
      ;;
    -g|--aws-security-group-id)
      AWS_SECURITY_GROUP_ID="$2"
      shift
      ;;
    -b|--basic-auth)
      BASIC_AUTH=true
      ;;
    --basic-auth-user)
      BASIC_AUTH_USER="$2"
      shift
      ;;
    --basic-auth-pass)
      BASIC_AUTH_PASS="$2"
      shift
      ;;
    *)
      usage
      exit 2
    ;;
  esac
  shift
done

[ $VERBOSE == true ] && set -x
require digdag
[ $CLOUD_PROVIDER == "aws" ] && require aws
buildBasicAuthURL
